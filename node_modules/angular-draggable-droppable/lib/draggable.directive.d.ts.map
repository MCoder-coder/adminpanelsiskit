{"version":3,"file":"draggable.directive.d.ts","sources":["draggable.directive.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, ElementRef, Renderer2, EventEmitter, OnDestroy, OnChanges, NgZone, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Subject, ReplaySubject } from 'rxjs';\r\nimport { DraggableHelper } from './draggable-helper.provider';\r\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\r\nexport interface Coordinates {\r\n    x: number;\r\n    y: number;\r\n}\r\nexport interface DragAxis {\r\n    x: boolean;\r\n    y: boolean;\r\n}\r\nexport interface SnapGrid {\r\n    x?: number;\r\n    y?: number;\r\n}\r\nexport interface DragPointerDownEvent extends Coordinates {\r\n}\r\nexport interface DragStartEvent {\r\n    cancelDrag$: ReplaySubject<void>;\r\n}\r\nexport interface DragMoveEvent extends Coordinates {\r\n}\r\nexport interface DragEndEvent extends Coordinates {\r\n    dragCancelled: boolean;\r\n}\r\nexport interface ValidateDragParams extends Coordinates {\r\n    transform: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n}\r\nexport declare type ValidateDrag = (params: ValidateDragParams) => boolean;\r\nexport interface PointerEvent {\r\n    clientX: number;\r\n    clientY: number;\r\n    event: MouseEvent | TouchEvent;\r\n}\r\nexport interface TimeLongPress {\r\n    timerBegin: number;\r\n    timerEnd: number;\r\n}\r\nexport interface GhostElementCreatedEvent {\r\n    clientX: number;\r\n    clientY: number;\r\n    element: HTMLElement;\r\n}\r\nexport declare class DraggableDirective implements OnInit, OnChanges, OnDestroy {\r\n    private element;\r\n    private renderer;\r\n    private draggableHelper;\r\n    private zone;\r\n    private vcr;\r\n    private scrollContainer;\r\n    private document;\r\n    /**\r\n     * an object of data you can pass to the drop event\r\n     */\r\n    dropData: any;\r\n    /**\r\n     * The axis along which the element is draggable\r\n     */\r\n    dragAxis: DragAxis;\r\n    /**\r\n     * Snap all drags to an x / y grid\r\n     */\r\n    dragSnapGrid: SnapGrid;\r\n    /**\r\n     * Show a ghost element that shows the drag when dragging\r\n     */\r\n    ghostDragEnabled: boolean;\r\n    /**\r\n     * Show the original element when ghostDragEnabled is true\r\n     */\r\n    showOriginalElementWhileDragging: boolean;\r\n    /**\r\n     * Allow custom behaviour to control when the element is dragged\r\n     */\r\n    validateDrag: ValidateDrag;\r\n    /**\r\n     * The cursor to use when hovering over a draggable element\r\n     */\r\n    dragCursor: string;\r\n    /**\r\n     * The css class to apply when the element is being dragged\r\n     */\r\n    dragActiveClass: string;\r\n    /**\r\n     * The element the ghost element will be appended to. Default is next to the dragged element\r\n     */\r\n    ghostElementAppendTo: HTMLElement;\r\n    /**\r\n     * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\r\n     */\r\n    ghostElementTemplate: TemplateRef<any>;\r\n    /**\r\n     * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\r\n     */\r\n    touchStartLongPress: {\r\n        delay: number;\r\n        delta: number;\r\n    };\r\n    autoScroll: {\r\n        margin: number | {\r\n            top?: number;\r\n            left?: number;\r\n            right?: number;\r\n            bottom?: number;\r\n        };\r\n        maxSpeed?: number | {\r\n            top?: number;\r\n            left?: number;\r\n            right?: number;\r\n            bottom?: number;\r\n        };\r\n        scrollWhenOutside?: boolean;\r\n    };\r\n    /**\r\n     * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\r\n     */\r\n    dragPointerDown: EventEmitter<DragPointerDownEvent>;\r\n    /**\r\n     * Called when the element has started to be dragged.\r\n     * Only called after at least one mouse or touch move event.\r\n     * If you call $event.cancelDrag$.emit() it will cancel the current drag\r\n     */\r\n    dragStart: EventEmitter<DragStartEvent>;\r\n    /**\r\n     * Called after the ghost element has been created\r\n     */\r\n    ghostElementCreated: EventEmitter<GhostElementCreatedEvent>;\r\n    /**\r\n     * Called when the element is being dragged\r\n     */\r\n    dragging: EventEmitter<DragMoveEvent>;\r\n    /**\r\n     * Called after the element is dragged\r\n     */\r\n    dragEnd: EventEmitter<DragEndEvent>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    pointerDown$: Subject<PointerEvent>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    pointerMove$: Subject<PointerEvent>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    pointerUp$: Subject<PointerEvent>;\r\n    private eventListenerSubscriptions;\r\n    private ghostElement;\r\n    private destroy$;\r\n    private timeLongPress;\r\n    private scroller;\r\n    /**\r\n     * @hidden\r\n     */\r\n    constructor(element: ElementRef<HTMLElement>, renderer: Renderer2, draggableHelper: DraggableHelper, zone: NgZone, vcr: ViewContainerRef, scrollContainer: DraggableScrollContainerDirective, document: any);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    private checkEventListeners;\r\n    private onMouseDown;\r\n    private onMouseUp;\r\n    private onTouchStart;\r\n    private onTouchEnd;\r\n    private onMouseEnter;\r\n    private onMouseLeave;\r\n    private canDrag;\r\n    private setCursor;\r\n    private unsubscribeEventListeners;\r\n    private setElementStyles;\r\n    private getScrollElement;\r\n    private getScrollPosition;\r\n    private shouldBeginDrag;\r\n    private enableScroll;\r\n    private disableScroll;\r\n    private hasScrollbar;\r\n}\r\n"]}