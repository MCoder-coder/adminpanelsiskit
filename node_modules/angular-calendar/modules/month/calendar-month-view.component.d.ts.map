{"version":3,"file":"calendar-month-view.component.d.ts","sources":["calendar-month-view.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, EventEmitter, ChangeDetectorRef, OnInit, OnDestroy, TemplateRef } from '@angular/core';\r\nimport { CalendarEvent, WeekDay, MonthView, MonthViewDay, ViewPeriod } from 'calendar-utils';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\r\nimport { CalendarUtils } from '../common/calendar-utils.provider';\r\nimport { DateAdapter } from '../../date-adapters/date-adapter';\r\nimport { PlacementArray } from 'positioning';\r\nexport interface CalendarMonthViewBeforeRenderEvent {\r\n    header: WeekDay[];\r\n    body: MonthViewDay[];\r\n    period: ViewPeriod;\r\n}\r\nexport interface CalendarMonthViewEventTimesChangedEvent<EventMetaType = any, DayMetaType = any> extends CalendarEventTimesChangedEvent<EventMetaType> {\r\n    day: MonthViewDay<DayMetaType>;\r\n}\r\n/**\r\n * Shows all events on a given month. Example usage:\r\n *\r\n * ```typescript\r\n * <mwl-calendar-month-view\r\n *  [viewDate]=\"viewDate\"\r\n *  [events]=\"events\">\r\n * </mwl-calendar-month-view>\r\n * ```\r\n */\r\nexport declare class CalendarMonthViewComponent implements OnChanges, OnInit, OnDestroy {\r\n    protected cdr: ChangeDetectorRef;\r\n    protected utils: CalendarUtils;\r\n    protected dateAdapter: DateAdapter;\r\n    /**\r\n     * The current view date\r\n     */\r\n    viewDate: Date;\r\n    /**\r\n     * An array of events to display on view.\r\n     * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\r\n     */\r\n    events: CalendarEvent[];\r\n    /**\r\n     * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\r\n     */\r\n    excludeDays: number[];\r\n    /**\r\n     * Whether the events list for the day of the `viewDate` option is visible or not\r\n     */\r\n    activeDayIsOpen: boolean;\r\n    /**\r\n     * If set will be used to determine the day that should be open. If not set, the `viewDate` is used\r\n     */\r\n    activeDay: Date;\r\n    /**\r\n     * An observable that when emitted on will re-render the current view\r\n     */\r\n    refresh: Subject<any>;\r\n    /**\r\n     * The locale used to format dates\r\n     */\r\n    locale: string;\r\n    /**\r\n     * The placement of the event tooltip\r\n     */\r\n    tooltipPlacement: PlacementArray;\r\n    /**\r\n     * A custom template to use for the event tooltips\r\n     */\r\n    tooltipTemplate: TemplateRef<any>;\r\n    /**\r\n     * Whether to append tooltips to the body or next to the trigger element\r\n     */\r\n    tooltipAppendToBody: boolean;\r\n    /**\r\n     * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\r\n     * will be displayed immediately.\r\n     */\r\n    tooltipDelay: number | null;\r\n    /**\r\n     * The start number of the week.\r\n     * If using the moment date adapter this option won't do anything and you'll need to set it globally like so:\r\n     * ```\r\n     * moment.updateLocale('en', {\r\n     *   week: {\r\n     *     dow: 1, // set start of week to monday instead\r\n     *     doy: 0,\r\n     *   },\r\n     * });\r\n     * ```\r\n     */\r\n    weekStartsOn: number;\r\n    /**\r\n     * A custom template to use to replace the header\r\n     */\r\n    headerTemplate: TemplateRef<any>;\r\n    /**\r\n     * A custom template to use to replace the day cell\r\n     */\r\n    cellTemplate: TemplateRef<any>;\r\n    /**\r\n     * A custom template to use for the slide down box of events for the active day\r\n     */\r\n    openDayEventsTemplate: TemplateRef<any>;\r\n    /**\r\n     * A custom template to use for event titles\r\n     */\r\n    eventTitleTemplate: TemplateRef<any>;\r\n    /**\r\n     * A custom template to use for event actions\r\n     */\r\n    eventActionsTemplate: TemplateRef<any>;\r\n    /**\r\n     * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\r\n     */\r\n    weekendDays: number[];\r\n    /**\r\n     * An output that will be called before the view is rendered for the current month.\r\n     * If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\r\n     */\r\n    beforeViewRender: EventEmitter<CalendarMonthViewBeforeRenderEvent>;\r\n    /**\r\n     * Called when the day cell is clicked\r\n     */\r\n    dayClicked: EventEmitter<{\r\n        day: MonthViewDay<any>;\r\n        sourceEvent: any;\r\n    }>;\r\n    /**\r\n     * Called when the event title is clicked\r\n     */\r\n    eventClicked: EventEmitter<{\r\n        event: CalendarEvent<any>;\r\n        sourceEvent: any;\r\n    }>;\r\n    /**\r\n     * Called when a header week day is clicked. Returns ISO day number.\r\n     */\r\n    columnHeaderClicked: EventEmitter<{\r\n        isoDayNumber: number;\r\n        sourceEvent: any;\r\n    }>;\r\n    /**\r\n     * Called when an event is dragged and dropped\r\n     */\r\n    eventTimesChanged: EventEmitter<CalendarMonthViewEventTimesChangedEvent<any, any>>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    columnHeaders: WeekDay[];\r\n    /**\r\n     * @hidden\r\n     */\r\n    view: MonthView;\r\n    /**\r\n     * @hidden\r\n     */\r\n    openRowIndex: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    openDay: MonthViewDay;\r\n    /**\r\n     * @hidden\r\n     */\r\n    refreshSubscription: Subscription;\r\n    /**\r\n     * @hidden\r\n     */\r\n    constructor(cdr: ChangeDetectorRef, utils: CalendarUtils, locale: string, dateAdapter: DateAdapter);\r\n    /**\r\n     * @hidden\r\n     */\r\n    trackByRowOffset: (index: number, offset: number) => string;\r\n    /**\r\n     * @hidden\r\n     */\r\n    trackByDate: (index: number, day: MonthViewDay<any>) => string;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnInit(): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnChanges(changes: any): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    toggleDayHighlight(event: CalendarEvent, isHighlighted: boolean): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    eventDropped(droppedOn: MonthViewDay, event: CalendarEvent, draggedFrom?: MonthViewDay): void;\r\n    protected refreshHeader(): void;\r\n    protected refreshBody(): void;\r\n    protected checkActiveDayIsOpen(): void;\r\n    protected refreshAll(): void;\r\n    protected emitBeforeViewRender(): void;\r\n}\r\n"]}