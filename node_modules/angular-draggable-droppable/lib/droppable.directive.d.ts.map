{"version":3,"file":"droppable.directive.d.ts","sources":["droppable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, ElementRef, OnDestroy, EventEmitter, NgZone, Renderer2 } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { DraggableHelper } from './draggable-helper.provider';\r\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\r\nexport interface DropEvent<T = any> {\r\n    dropData: T;\r\n}\r\nexport declare class DroppableDirective implements OnInit, OnDestroy {\r\n    private element;\r\n    private draggableHelper;\r\n    private zone;\r\n    private renderer;\r\n    private scrollContainer;\r\n    /**\r\n     * Added to the element when an element is dragged over it\r\n     */\r\n    dragOverClass: string;\r\n    /**\r\n     * Added to the element any time a draggable element is being dragged\r\n     */\r\n    dragActiveClass: string;\r\n    /**\r\n     * Called when a draggable element starts overlapping the element\r\n     */\r\n    dragEnter: EventEmitter<DropEvent<any>>;\r\n    /**\r\n     * Called when a draggable element stops overlapping the element\r\n     */\r\n    dragLeave: EventEmitter<DropEvent<any>>;\r\n    /**\r\n     * Called when a draggable element is moved over the element\r\n     */\r\n    dragOver: EventEmitter<DropEvent<any>>;\r\n    /**\r\n     * Called when a draggable element is dropped on this element\r\n     */\r\n    drop: EventEmitter<DropEvent<any>>;\r\n    currentDragSubscription: Subscription;\r\n    constructor(element: ElementRef<HTMLElement>, draggableHelper: DraggableHelper, zone: NgZone, renderer: Renderer2, scrollContainer: DraggableScrollContainerDirective);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}