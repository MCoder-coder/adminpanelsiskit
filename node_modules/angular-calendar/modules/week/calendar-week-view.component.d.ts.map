{"version":3,"file":"calendar-week-view.component.d.ts","sources":["calendar-week-view.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ChangeDetectorRef, OnChanges, OnInit, OnDestroy, TemplateRef } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { WeekDay, CalendarEvent, WeekViewAllDayEvent, WeekView, WeekViewHourColumn, WeekViewTimeEvent, WeekViewHourSegment, WeekViewHour, WeekViewAllDayEventRow } from 'calendar-utils';\r\nimport { ResizeEvent } from 'angular-resizable-element';\r\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\r\nimport { CalendarUtils } from '../common/calendar-utils.provider';\r\nimport { DateAdapter } from '../../date-adapters/date-adapter';\r\nimport { DragEndEvent, DropEvent, DragMoveEvent, ValidateDrag } from 'angular-draggable-droppable';\r\nimport { PlacementArray } from 'positioning';\r\nexport interface WeekViewAllDayEventResize {\r\n    originalOffset: number;\r\n    originalSpan: number;\r\n    edge: string;\r\n}\r\nexport interface CalendarWeekViewBeforeRenderEvent extends WeekView {\r\n    header: WeekDay[];\r\n}\r\n/**\r\n * Shows all events on a given week. Example usage:\r\n *\r\n * ```typescript\r\n * <mwl-calendar-week-view\r\n *  [viewDate]=\"viewDate\"\r\n *  [events]=\"events\">\r\n * </mwl-calendar-week-view>\r\n * ```\r\n */\r\nexport declare class CalendarWeekViewComponent implements OnChanges, OnInit, OnDestroy {\r\n    protected cdr: ChangeDetectorRef;\r\n    protected utils: CalendarUtils;\r\n    protected dateAdapter: DateAdapter;\r\n    /**\r\n     * The current view date\r\n     */\r\n    viewDate: Date;\r\n    /**\r\n     * An array of events to display on view\r\n     * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\r\n     */\r\n    events: CalendarEvent[];\r\n    /**\r\n     * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\r\n     */\r\n    excludeDays: number[];\r\n    /**\r\n     * An observable that when emitted on will re-render the current view\r\n     */\r\n    refresh: Subject<any>;\r\n    /**\r\n     * The locale used to format dates\r\n     */\r\n    locale: string;\r\n    /**\r\n     * The placement of the event tooltip\r\n     */\r\n    tooltipPlacement: PlacementArray;\r\n    /**\r\n     * A custom template to use for the event tooltips\r\n     */\r\n    tooltipTemplate: TemplateRef<any>;\r\n    /**\r\n     * Whether to append tooltips to the body or next to the trigger element\r\n     */\r\n    tooltipAppendToBody: boolean;\r\n    /**\r\n     * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\r\n     * will be displayed immediately.\r\n     */\r\n    tooltipDelay: number | null;\r\n    /**\r\n     * The start number of the week.\r\n     * This is ignored when the `daysInWeek` input is also set as the `viewDate` will be used as the start of the week instead.\r\n     * Note, you should also pass this to the calendar title pipe so it shows the same days: {{ viewDate | calendarDate:(view + 'ViewTitle'):locale:weekStartsOn }}\r\n     * If using the moment date adapter this option won't do anything and you'll need to set it globally like so:\r\n     * ```\r\n     * moment.updateLocale('en', {\r\n     *   week: {\r\n     *     dow: 1, // set start of week to monday instead\r\n     *     doy: 0,\r\n     *   },\r\n     * });\r\n     * ```\r\n     */\r\n    weekStartsOn: number;\r\n    /**\r\n     * A custom template to use to replace the header\r\n     */\r\n    headerTemplate: TemplateRef<any>;\r\n    /**\r\n     * A custom template to use for week view events\r\n     */\r\n    eventTemplate: TemplateRef<any>;\r\n    /**\r\n     * A custom template to use for event titles\r\n     */\r\n    eventTitleTemplate: TemplateRef<any>;\r\n    /**\r\n     * A custom template to use for event actions\r\n     */\r\n    eventActionsTemplate: TemplateRef<any>;\r\n    /**\r\n     * The precision to display events.\r\n     * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\r\n     */\r\n    precision: 'days' | 'minutes';\r\n    /**\r\n     * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\r\n     */\r\n    weekendDays: number[];\r\n    /**\r\n     * Whether to snap events to a grid when dragging\r\n     */\r\n    snapDraggedEvents: boolean;\r\n    /**\r\n     * The number of segments in an hour. Must divide equally into 60.\r\n     */\r\n    hourSegments: number;\r\n    /**\r\n     * The height in pixels of each hour segment\r\n     */\r\n    hourSegmentHeight: number;\r\n    /**\r\n     * The day start hours in 24 hour time. Must be 0-23\r\n     */\r\n    dayStartHour: number;\r\n    /**\r\n     * The day start minutes. Must be 0-59\r\n     */\r\n    dayStartMinute: number;\r\n    /**\r\n     * The day end hours in 24 hour time. Must be 0-23\r\n     */\r\n    dayEndHour: number;\r\n    /**\r\n     * The day end minutes. Must be 0-59\r\n     */\r\n    dayEndMinute: number;\r\n    /**\r\n     * A custom template to use to replace the hour segment\r\n     */\r\n    hourSegmentTemplate: TemplateRef<any>;\r\n    /**\r\n     * The grid size to snap resizing and dragging of hourly events to\r\n     */\r\n    eventSnapSize: number;\r\n    /**\r\n     * A custom template to use for the all day events label text\r\n     */\r\n    allDayEventsLabelTemplate: TemplateRef<any>;\r\n    /**\r\n     * The number of days in a week. Can be used to create a shorter or longer week view.\r\n     * The first day of the week will always be the `viewDate` and `weekStartsOn` if set will be ignored\r\n     */\r\n    daysInWeek: number;\r\n    /**\r\n     * A custom template to use for the current time marker\r\n     */\r\n    currentTimeMarkerTemplate: TemplateRef<any>;\r\n    /**\r\n     * Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\r\n     */\r\n    dayHeaderClicked: EventEmitter<{\r\n        day: WeekDay;\r\n        sourceEvent: MouseEvent;\r\n    }>;\r\n    /**\r\n     * Called when the event title is clicked\r\n     */\r\n    eventClicked: EventEmitter<{\r\n        event: CalendarEvent<any>;\r\n        sourceEvent: any;\r\n    }>;\r\n    /**\r\n     * Called when an event is resized or dragged and dropped\r\n     */\r\n    eventTimesChanged: EventEmitter<CalendarEventTimesChangedEvent<any>>;\r\n    /**\r\n     * An output that will be called before the view is rendered for the current week.\r\n     * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\r\n     */\r\n    beforeViewRender: EventEmitter<CalendarWeekViewBeforeRenderEvent>;\r\n    /**\r\n     * Called when an hour segment is clicked\r\n     */\r\n    hourSegmentClicked: EventEmitter<{\r\n        date: Date;\r\n        sourceEvent: MouseEvent;\r\n    }>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    days: WeekDay[];\r\n    /**\r\n     * @hidden\r\n     */\r\n    view: WeekView;\r\n    /**\r\n     * @hidden\r\n     */\r\n    refreshSubscription: Subscription;\r\n    /**\r\n     * @hidden\r\n     */\r\n    allDayEventResizes: Map<WeekViewAllDayEvent, WeekViewAllDayEventResize>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    timeEventResizes: Map<CalendarEvent, ResizeEvent>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    eventDragEnterByType: {\r\n        allDay: number;\r\n        time: number;\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    dragActive: boolean;\r\n    /**\r\n     * @hidden\r\n     */\r\n    dragAlreadyMoved: boolean;\r\n    /**\r\n     * @hidden\r\n     */\r\n    validateDrag: ValidateDrag;\r\n    /**\r\n     * @hidden\r\n     */\r\n    validateResize: (args: any) => boolean;\r\n    /**\r\n     * @hidden\r\n     */\r\n    dayColumnWidth: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    calendarId: symbol;\r\n    /**\r\n     * @hidden\r\n     */\r\n    lastDraggedEvent: CalendarEvent;\r\n    /**\r\n     * @hidden\r\n     */\r\n    trackByWeekDayHeaderDate: (index: number, day: WeekDay) => string;\r\n    /**\r\n     * @hidden\r\n     */\r\n    trackByHourSegment: (index: number, segment: WeekViewHourSegment) => string;\r\n    /**\r\n     * @hidden\r\n     */\r\n    trackByHour: (index: number, hour: WeekViewHour) => string;\r\n    /**\r\n     * @hidden\r\n     */\r\n    trackByWeekAllDayEvent: (index: number, weekEvent: WeekViewAllDayEvent) => string | number | CalendarEvent<any>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    trackByWeekTimeEvent: (index: number, weekEvent: WeekViewTimeEvent) => string | number | CalendarEvent<any>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    private lastDragEnterDate;\r\n    /**\r\n     * @hidden\r\n     */\r\n    constructor(cdr: ChangeDetectorRef, utils: CalendarUtils, locale: string, dateAdapter: DateAdapter);\r\n    /**\r\n     * @hidden\r\n     */\r\n    trackByHourColumn: (index: number, column: WeekViewHourColumn) => string | WeekViewHourColumn;\r\n    /**\r\n     * @hidden\r\n     */\r\n    trackById: (index: number, row: WeekViewAllDayEventRow) => string;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnInit(): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnChanges(changes: any): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    timeEventResizeStarted(eventsContainer: HTMLElement, timeEvent: WeekViewTimeEvent, resizeEvent: ResizeEvent): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    timeEventResizing(timeEvent: WeekViewTimeEvent, resizeEvent: ResizeEvent): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    timeEventResizeEnded(timeEvent: WeekViewTimeEvent): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    allDayEventResizeStarted(allDayEventsContainer: HTMLElement, allDayEvent: WeekViewAllDayEvent, resizeEvent: ResizeEvent): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    allDayEventResizing(allDayEvent: WeekViewAllDayEvent, resizeEvent: ResizeEvent, dayWidth: number): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    allDayEventResizeEnded(allDayEvent: WeekViewAllDayEvent): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    getDayColumnWidth(eventRowContainer: HTMLElement): number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    dateDragEnter(date: Date): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    eventDropped(dropEvent: DropEvent<{\r\n        event?: CalendarEvent;\r\n        calendarId?: symbol;\r\n    }>, date: Date, allDay: boolean): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    dragEnter(type: 'allDay' | 'time'): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    dragLeave(type: 'allDay' | 'time'): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    dragStarted(eventsContainer: HTMLElement, event: HTMLElement, dayEvent?: WeekViewTimeEvent): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    allDayEventDragMove(): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    dragEnded(weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent, dragEndEvent: DragEndEvent, dayWidth: number, useY?: boolean): void;\r\n    protected refreshHeader(): void;\r\n    protected refreshBody(): void;\r\n    protected refreshAll(): void;\r\n    protected emitBeforeViewRender(): void;\r\n    protected getWeekView(events: CalendarEvent[]): WeekView;\r\n    protected getDragMovedEventTimes(weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent, dragEndEvent: DragEndEvent | DragMoveEvent, dayWidth: number, useY: boolean): {\r\n        start: Date;\r\n        end: Date;\r\n    };\r\n    protected restoreOriginalEvents(tempEvents: CalendarEvent[], adjustedEvents: Map<CalendarEvent, CalendarEvent>, snapDraggedEvents?: boolean): void;\r\n    protected getTimeEventResizedDates(calendarEvent: CalendarEvent, resizeEvent: ResizeEvent): {\r\n        start: Date;\r\n        end: Date;\r\n    };\r\n    protected resizeStarted(eventsContainer: HTMLElement, minWidth?: number): void;\r\n}\r\n"]}