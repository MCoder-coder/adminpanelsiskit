{"version":3,"file":"resizable.directive.d.ts","sources":["resizable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Renderer2, ElementRef, OnInit, EventEmitter, OnDestroy, NgZone, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Edges } from './interfaces/edges.interface';\r\nimport { ResizeEvent } from './interfaces/resize-event.interface';\r\nexport interface ResizeCursors {\r\n    topLeft: string;\r\n    topRight: string;\r\n    bottomLeft: string;\r\n    bottomRight: string;\r\n    leftOrRight: string;\r\n    topOrBottom: string;\r\n}\r\nexport declare const MOUSE_MOVE_THROTTLE_MS: number;\r\n/**\r\n * Place this on an element to make it resizable. For example:\r\n *\r\n * ```html\r\n * <div\r\n *   mwlResizable\r\n *   [resizeEdges]=\"{bottom: true, right: true, top: true, left: true}\"\r\n *   [enableGhostResize]=\"true\">\r\n * </div>\r\n * ```\r\n */\r\nexport declare class ResizableDirective implements OnInit, OnChanges, OnDestroy {\r\n    private platformId;\r\n    private renderer;\r\n    elm: ElementRef;\r\n    private zone;\r\n    /**\r\n     * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\r\n     */\r\n    validateResize: (resizeEvent: ResizeEvent) => boolean;\r\n    /**\r\n     * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\r\n     * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\r\n     */\r\n    resizeEdges: Edges;\r\n    /**\r\n     * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\r\n     */\r\n    enableGhostResize: boolean;\r\n    /**\r\n     * A snap grid that resize events will be locked to.\r\n     *\r\n     * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\r\n     */\r\n    resizeSnapGrid: Edges;\r\n    /**\r\n     * The mouse cursors that will be set on the resize edges\r\n     */\r\n    resizeCursors: ResizeCursors;\r\n    /**\r\n     * Mouse over thickness to active cursor.\r\n     * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\r\n     */\r\n    resizeCursorPrecision: number;\r\n    /**\r\n     * Define the positioning of the ghost element (can be fixed or absolute)\r\n     */\r\n    ghostElementPositioning: 'fixed' | 'absolute';\r\n    /**\r\n     * Allow elements to be resized to negative dimensions\r\n     */\r\n    allowNegativeResizes: boolean;\r\n    /**\r\n     * The mouse move throttle in milliseconds, default: 50 ms\r\n     */\r\n    mouseMoveThrottleMS: number;\r\n    /**\r\n     * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\r\n     */\r\n    resizeStart: EventEmitter<ResizeEvent>;\r\n    /**\r\n     * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\r\n     */\r\n    resizing: EventEmitter<ResizeEvent>;\r\n    /**\r\n     * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\r\n     */\r\n    resizeEnd: EventEmitter<ResizeEvent>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    mouseup: Subject<{\r\n        clientX: number;\r\n        clientY: number;\r\n        edges?: Edges;\r\n    }>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    mousedown: Subject<{\r\n        clientX: number;\r\n        clientY: number;\r\n        edges?: Edges;\r\n    }>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    mousemove: Subject<{\r\n        clientX: number;\r\n        clientY: number;\r\n        edges?: Edges;\r\n        event: MouseEvent | TouchEvent;\r\n    }>;\r\n    private pointerEventListeners;\r\n    private destroy$;\r\n    private resizeEdges$;\r\n    /**\r\n     * @hidden\r\n     */\r\n    constructor(platformId: any, renderer: Renderer2, elm: ElementRef, zone: NgZone);\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnInit(): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnDestroy(): void;\r\n    private setElementClass;\r\n}\r\n"]}